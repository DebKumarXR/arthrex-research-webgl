{"mappings":"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","sources":["arthrex/geometry.js","node_modules/three/examples/jsm/math/MeshSurfaceSampler.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\r\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\r\nimport {\r\n\tBrush,\r\n\tEvaluator,\r\n\tADDITION,\r\n\tSUBTRACTION,\r\n\tREVERSE_SUBTRACTION,\r\n\tINTERSECTION,\r\n\tDIFFERENCE,\r\n\tHOLLOW_SUBTRACTION,\r\n\tHOLLOW_INTERSECTION,\r\n} from '..';\r\n\r\nconst params = {\r\n\r\n\toperation: SUBTRACTION,\r\n\twireframe: false,\r\n\tdisplayBrushes: false,\r\n\tshadows: true,\r\n\tuseGroups: true,\r\n\tconsolidateGroups: true,\r\n\r\n\trandomize: () => {\r\n\r\n\t\trandomizeBrushes();\r\n\t\tupdateCSG();\r\n\r\n\t}\r\n};\r\n\r\nlet renderer, camera, scene, controls, gui, outputContainer;\r\nlet bunnyBrush, brushes;\r\nlet material, surfaceSampler;\r\nlet resultObject, wireframeResult, light;\r\nlet csgEvaluator = new Evaluator();\r\ncsgEvaluator.attributes = [ 'position', 'normal' ];\r\ncsgEvaluator.useGroups = false;\r\n\r\nconst materialMap = new Map();\r\n\r\ninit();\r\n\r\nasync function init() {\r\n\r\n\tconst bgColor = 0x111111;\r\n\r\n\toutputContainer = document.getElementById( 'output' );\r\n\r\n\t// renderer setup\r\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\r\n\trenderer.setPixelRatio( window.devicePixelRatio );\r\n\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\trenderer.setClearColor( bgColor, 1 );\r\n\trenderer.shadowMap.enabled = true;\r\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\tdocument.body.appendChild( renderer.domElement );\r\n\r\n\t// scene setup\r\n\tscene = new THREE.Scene();\r\n\r\n\t// lights\r\n\tlight = new THREE.DirectionalLight( 0xffffff, 3.5 );\r\n\tlight.position.set( 1, 2, 1 );\r\n\tscene.add( light, new THREE.AmbientLight( 0xb0bec5, 0.35 ) );\r\n\r\n\t// shadows\r\n\tconst shadowCam = light.shadow.camera;\r\n\tlight.castShadow = true;\r\n\tlight.shadow.mapSize.setScalar( 4096 );\r\n\tlight.shadow.bias = 1e-5;\r\n\tlight.shadow.normalBias = 1e-2;\r\n\r\n\tshadowCam.left = shadowCam.bottom = - 2.5;\r\n\tshadowCam.right = shadowCam.top = 2.5;\r\n\tshadowCam.updateProjectionMatrix();\r\n\r\n\t// camera setup\r\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\r\n\tcamera.position.set( 0, 0.65, 2.5 );\r\n\tcamera.far = 100;\r\n\tcamera.updateProjectionMatrix();\r\n\r\n\t// controls\r\n\tcontrols = new OrbitControls( camera, renderer.domElement );\r\n\r\n\t// floor\r\n\tconst floor = new THREE.Mesh( new THREE.PlaneGeometry(), new THREE.ShadowMaterial( { opacity: 0.05 } ) );\r\n\tfloor.material.color.set( 0xE0F7FA );\r\n\tfloor.rotation.x = - Math.PI / 2;\r\n\tfloor.scale.setScalar( 10 );\r\n\tfloor.position.y = - 0.5;\r\n\tfloor.receiveShadow = true;\r\n\tscene.add( floor );\r\n\r\n\tconst gltf = await new GLTFLoader()\r\n\t\t.setMeshoptDecoder( MeshoptDecoder )\r\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/stanford-bunny/bunny.glb' );\r\n\r\n\tconst geometry = gltf.scene.children[ 0 ].geometry;\r\n\tgeometry.computeVertexNormals();\r\n\r\n\t// initialize brushes\r\n\tbunnyBrush = new Brush( geometry, new THREE.MeshStandardMaterial() );\r\n\tbunnyBrush.position.y = - 0.5;\r\n\tbunnyBrush.updateMatrixWorld();\r\n\tbunnyBrush.receiveShadow = true;\r\n\tscene.add( bunnyBrush );\r\n\r\n\tmaterial = new THREE.MeshStandardMaterial();\r\n\tbrushes = [];\r\n\r\n\tsurfaceSampler = new MeshSurfaceSampler( bunnyBrush );\r\n\tsurfaceSampler.build();\r\n\r\n\tfor ( let i = 0; i < 50; i ++ ) {\r\n\r\n\t\tconst b = new Brush( new THREE.SphereGeometry( 1, 15, 15 ), material );\r\n\t\tb.receiveShadow = true;\r\n\t\tscene.add( b );\r\n\t\tbrushes.push( b );\r\n\r\n\t}\r\n\r\n\t// initialize materials\r\n\tbunnyBrush.material.opacity = 0.15;\r\n\tbunnyBrush.material.transparent = true;\r\n\tbunnyBrush.material.depthWrite = false;\r\n\tbunnyBrush.material.polygonOffset = true;\r\n\tbunnyBrush.material.polygonOffsetFactor = 0.1;\r\n\tbunnyBrush.material.polygonOffsetUnits = 0.1;\r\n\tbunnyBrush.material.side = THREE.DoubleSide;\r\n\tbunnyBrush.material.premultipliedAlpha = true;\r\n\tbunnyBrush.material.color.set( 0xE0F7FA );\r\n\r\n\tmaterial.opacity = 0.15;\r\n\tmaterial.transparent = true;\r\n\tmaterial.depthWrite = false;\r\n\tmaterial.polygonOffset = true;\r\n\tmaterial.polygonOffsetFactor = 0.1;\r\n\tmaterial.polygonOffsetUnits = 0.1;\r\n\tmaterial.side = THREE.DoubleSide;\r\n\tmaterial.premultipliedAlpha = true;\r\n\tmaterial.roughness = 0.25;\r\n\tmaterial.color.set( 0x4DD0E1 );\r\n\r\n\t// create solid material equivalents\r\n\tlet mat;\r\n\tmat = bunnyBrush.material.clone();\r\n\tmat.opacity = 1;\r\n\tmat.transparent = false;\r\n\tmat.depthWrite = true;\r\n\tmaterialMap.set( bunnyBrush.material, mat );\r\n\r\n\tmat = material.clone();\r\n\tmat.opacity = 1;\r\n\tmat.transparent = false;\r\n\tmat.depthWrite = true;\r\n\tmaterialMap.set( material, mat );\r\n\r\n\t// add object displaying the result\r\n\tresultObject = new THREE.Mesh( new THREE.BufferGeometry(), new THREE.MeshStandardMaterial( {\r\n\t\troughness: 0.1,\r\n\t\tflatShading: false,\r\n\t\tpolygonOffset: true,\r\n\t\tpolygonOffsetUnits: 1,\r\n\t\tpolygonOffsetFactor: 1,\r\n\t} ) );\r\n\tresultObject.castShadow = true;\r\n\tresultObject.receiveShadow = true;\r\n\tscene.add( resultObject );\r\n\r\n\t// add wireframe representation\r\n\twireframeResult = new THREE.Mesh( resultObject.geometry, new THREE.MeshBasicMaterial( {\r\n\t\twireframe: true,\r\n\t\tcolor: 0,\r\n\t\topacity: 0.15,\r\n\t\ttransparent: true,\r\n\t} ) );\r\n\twireframeResult.material.color.set( 0x001516 );\r\n\tscene.add( wireframeResult );\r\n\r\n\t// gui\r\n\tgui = new GUI();\r\n\tgui.add( params, 'operation', {\r\n\t\tADDITION, SUBTRACTION, REVERSE_SUBTRACTION, INTERSECTION,\r\n\t\tDIFFERENCE, HOLLOW_SUBTRACTION, HOLLOW_INTERSECTION,\r\n\t} ).onChange( () => {\r\n\r\n\t\tupdateCSG();\r\n\r\n\t} );\r\n\tgui.add( params, 'displayBrushes' );\r\n\tgui.add( params, 'shadows' );\r\n\tgui.add( params, 'wireframe' );\r\n\tgui.add( params, 'useGroups' ).onChange( updateCSG );\r\n\tgui.add( params, 'consolidateGroups' ).onChange( updateCSG );\r\n\tgui.add( params, 'randomize' );\r\n\r\n\twindow.addEventListener( 'resize', function () {\r\n\r\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t}, false );\r\n\r\n\trandomizeBrushes();\r\n\tupdateCSG();\r\n\trender();\r\n\r\n}\r\n\r\nfunction updateCSG() {\r\n\r\n\tconst startTime = window.performance.now();\r\n\tlet finalBrush = brushes[ 0 ];\r\n\tcsgEvaluator.useGroups = params.useGroups;\r\n\tcsgEvaluator.consolidateGroups = params.consolidateGroups;\r\n\tfor ( let i = 1, l = brushes.length; i < l; i ++ ) {\r\n\r\n\t\tconst b = brushes[ i ];\r\n\t\tfinalBrush = csgEvaluator.evaluate( finalBrush, b, ADDITION );\r\n\t\tfinalBrush.material = material;\r\n\r\n\t}\r\n\r\n\tcsgEvaluator.evaluate( bunnyBrush, finalBrush, params.operation, resultObject );\r\n\tif ( params.useGroups ) {\r\n\r\n\t\tresultObject.material = resultObject.material.map( m => materialMap.get( m ) );\r\n\r\n\t} else {\r\n\r\n\t\tresultObject.material = materialMap.get( bunnyBrush.material );\r\n\r\n\t}\r\n\r\n\tconst deltaTime = window.performance.now() - startTime;\r\n\tconst geometry = resultObject.geometry;\r\n\toutputContainer.innerText =\r\n\t\t`${ deltaTime.toFixed( 3 ) }ms\\n` +\r\n\t\t`${ geometry.groups.length } groups\\n` +\r\n\t\t`${ Array.isArray( resultObject.material ) ? resultObject.material.length : 1 } materials`;\r\n\r\n}\r\n\r\nfunction randomizeBrushes() {\r\n\r\n\tfor ( let i = 0; i < brushes.length; i ++ ) {\r\n\r\n\t\tconst b = brushes[ i ];\r\n\t\tsurfaceSampler.sample( b.position );\r\n\t\tb.position.applyMatrix4( bunnyBrush.matrixWorld );\r\n\t\tb.scale.setScalar( THREE.MathUtils.lerp( 0.05, 0.15, Math.random() ) );\r\n\t\tb.updateMatrixWorld();\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction render() {\r\n\r\n\trequestAnimationFrame( render );\r\n\r\n\twireframeResult.visible = params.wireframe;\r\n\tbunnyBrush.visible = params.displayBrushes;\r\n\tbrushes.forEach( b => b.visible = params.displayBrushes );\r\n\r\n\tlight.castShadow = params.shadows;\r\n\r\n\trenderer.render( scene, camera );\r\n\r\n}\r\n\r\n\r\n\r\n","import {\n\tTriangle,\n\tVector2,\n\tVector3\n} from 'three';\n\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nconst _face = new Triangle();\nconst _color = new Vector3();\nconst _uva = new Vector2(), _uvb = new Vector2(), _uvc = new Vector2();\n\nclass MeshSurfaceSampler {\n\n\tconstructor( mesh ) {\n\n\t\tthis.geometry = mesh.geometry;\n\t\tthis.randomFunction = Math.random;\n\n\t\tthis.indexAttribute = this.geometry.index;\n\t\tthis.positionAttribute = this.geometry.getAttribute( 'position' );\n\t\tthis.normalAttribute = this.geometry.getAttribute( 'normal' );\n\t\tthis.colorAttribute = this.geometry.getAttribute( 'color' );\n\t\tthis.uvAttribute = this.geometry.getAttribute( 'uv' );\n\t\tthis.weightAttribute = null;\n\n\t\tthis.distribution = null;\n\n\t}\n\n\tsetWeightAttribute( name ) {\n\n\t\tthis.weightAttribute = name ? this.geometry.getAttribute( name ) : null;\n\n\t\treturn this;\n\n\t}\n\n\tbuild() {\n\n\t\tconst indexAttribute = this.indexAttribute;\n\t\tconst positionAttribute = this.positionAttribute;\n\t\tconst weightAttribute = this.weightAttribute;\n\n\t\tconst totalFaces = indexAttribute ? ( indexAttribute.count / 3 ) : ( positionAttribute.count / 3 );\n\t\tconst faceWeights = new Float32Array( totalFaces );\n\n\t\t// Accumulate weights for each mesh face.\n\n\t\tfor ( let i = 0; i < totalFaces; i ++ ) {\n\n\t\t\tlet faceWeight = 1;\n\n\t\t\tlet i0 = 3 * i;\n\t\t\tlet i1 = 3 * i + 1;\n\t\t\tlet i2 = 3 * i + 2;\n\n\t\t\tif ( indexAttribute ) {\n\n\t\t\t\ti0 = indexAttribute.getX( i0 );\n\t\t\t\ti1 = indexAttribute.getX( i1 );\n\t\t\t\ti2 = indexAttribute.getX( i2 );\n\n\t\t\t}\n\n\t\t\tif ( weightAttribute ) {\n\n\t\t\t\tfaceWeight = weightAttribute.getX( i0 )\n\t\t\t\t\t+ weightAttribute.getX( i1 )\n\t\t\t\t\t+ weightAttribute.getX( i2 );\n\n\t\t\t}\n\n\t\t\t_face.a.fromBufferAttribute( positionAttribute, i0 );\n\t\t\t_face.b.fromBufferAttribute( positionAttribute, i1 );\n\t\t\t_face.c.fromBufferAttribute( positionAttribute, i2 );\n\t\t\tfaceWeight *= _face.getArea();\n\n\t\t\tfaceWeights[ i ] = faceWeight;\n\n\t\t}\n\n\t\t// Store cumulative total face weights in an array, where weight index\n\t\t// corresponds to face index.\n\n\t\tconst distribution = new Float32Array( totalFaces );\n\t\tlet cumulativeTotal = 0;\n\n\t\tfor ( let i = 0; i < totalFaces; i ++ ) {\n\n\t\t\tcumulativeTotal += faceWeights[ i ];\n\t\t\tdistribution[ i ] = cumulativeTotal;\n\n\t\t}\n\n\t\tthis.distribution = distribution;\n\t\treturn this;\n\n\t}\n\n\tsetRandomGenerator( randomFunction ) {\n\n\t\tthis.randomFunction = randomFunction;\n\t\treturn this;\n\n\t}\n\n\tsample( targetPosition, targetNormal, targetColor, targetUV ) {\n\n\t\tconst faceIndex = this.sampleFaceIndex();\n\t\treturn this.sampleFace( faceIndex, targetPosition, targetNormal, targetColor, targetUV );\n\n\t}\n\n\tsampleFaceIndex() {\n\n\t\tconst cumulativeTotal = this.distribution[ this.distribution.length - 1 ];\n\t\treturn this.binarySearch( this.randomFunction() * cumulativeTotal );\n\n\t}\n\n\tbinarySearch( x ) {\n\n\t\tconst dist = this.distribution;\n\t\tlet start = 0;\n\t\tlet end = dist.length - 1;\n\n\t\tlet index = - 1;\n\n\t\twhile ( start <= end ) {\n\n\t\t\tconst mid = Math.ceil( ( start + end ) / 2 );\n\n\t\t\tif ( mid === 0 || dist[ mid - 1 ] <= x && dist[ mid ] > x ) {\n\n\t\t\t\tindex = mid;\n\n\t\t\t\tbreak;\n\n\t\t\t} else if ( x < dist[ mid ] ) {\n\n\t\t\t\tend = mid - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstart = mid + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n\tsampleFace( faceIndex, targetPosition, targetNormal, targetColor, targetUV ) {\n\n\t\tlet u = this.randomFunction();\n\t\tlet v = this.randomFunction();\n\n\t\tif ( u + v > 1 ) {\n\n\t\t\tu = 1 - u;\n\t\t\tv = 1 - v;\n\n\t\t}\n\n\t\t// get the vertex attribute indices\n\t\tconst indexAttribute = this.indexAttribute;\n\t\tlet i0 = faceIndex * 3;\n\t\tlet i1 = faceIndex * 3 + 1;\n\t\tlet i2 = faceIndex * 3 + 2;\n\t\tif ( indexAttribute ) {\n\n\t\t\ti0 = indexAttribute.getX( i0 );\n\t\t\ti1 = indexAttribute.getX( i1 );\n\t\t\ti2 = indexAttribute.getX( i2 );\n\n\t\t}\n\n\t\t_face.a.fromBufferAttribute( this.positionAttribute, i0 );\n\t\t_face.b.fromBufferAttribute( this.positionAttribute, i1 );\n\t\t_face.c.fromBufferAttribute( this.positionAttribute, i2 );\n\n\t\ttargetPosition\n\t\t\t.set( 0, 0, 0 )\n\t\t\t.addScaledVector( _face.a, u )\n\t\t\t.addScaledVector( _face.b, v )\n\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\tif ( targetNormal !== undefined ) {\n\n\t\t\tif ( this.normalAttribute !== undefined ) {\n\n\t\t\t\t_face.a.fromBufferAttribute( this.normalAttribute, i0 );\n\t\t\t\t_face.b.fromBufferAttribute( this.normalAttribute, i1 );\n\t\t\t\t_face.c.fromBufferAttribute( this.normalAttribute, i2 );\n\t\t\t\ttargetNormal.set( 0, 0, 0 ).addScaledVector( _face.a, u ).addScaledVector( _face.b, v ).addScaledVector( _face.c, 1 - ( u + v ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\t_face.getNormal( targetNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetColor !== undefined && this.colorAttribute !== undefined ) {\n\n\t\t\t_face.a.fromBufferAttribute( this.colorAttribute, i0 );\n\t\t\t_face.b.fromBufferAttribute( this.colorAttribute, i1 );\n\t\t\t_face.c.fromBufferAttribute( this.colorAttribute, i2 );\n\n\t\t\t_color\n\t\t\t\t.set( 0, 0, 0 )\n\t\t\t\t.addScaledVector( _face.a, u )\n\t\t\t\t.addScaledVector( _face.b, v )\n\t\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\t\ttargetColor.r = _color.x;\n\t\t\ttargetColor.g = _color.y;\n\t\t\ttargetColor.b = _color.z;\n\n\t\t}\n\n\t\tif ( targetUV !== undefined && this.uvAttribute !== undefined ) {\n\n\t\t\t_uva.fromBufferAttribute( this.uvAttribute, i0 );\n\t\t\t_uvb.fromBufferAttribute( this.uvAttribute, i1 );\n\t\t\t_uvc.fromBufferAttribute( this.uvAttribute, i2 );\n\t\t\ttargetUV.set( 0, 0 ).addScaledVector( _uva, u ).addScaledVector( _uvb, v ).addScaledVector( _uvc, 1 - ( u + v ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshSurfaceSampler };\n"],"names":["$ilwiq","parcelRequire","$6ad73aa5bbba7cf7$var$_face","Triangle","$6ad73aa5bbba7cf7$var$_color","Vector3","$6ad73aa5bbba7cf7$var$_uva","Vector2","$6ad73aa5bbba7cf7$var$_uvb","$6ad73aa5bbba7cf7$var$_uvc","$6ad73aa5bbba7cf7$export$45494d519eb31ab","constructor","mesh","this","geometry","randomFunction","Math","random","indexAttribute","index","positionAttribute","getAttribute","normalAttribute","colorAttribute","uvAttribute","weightAttribute","distribution","setWeightAttribute","name","build","totalFaces","count","faceWeights","Float32Array","i","faceWeight","i0","i1","i2","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","setRandomGenerator","sample","targetPosition","targetNormal","targetColor","targetUV","faceIndex","sampleFaceIndex","sampleFace","length","binarySearch","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","undefined","normalize","getNormal","r","g","y","z","$38fa8d142ebbdb45$var$params","operation","$4CEV9","SUBTRACTION","wireframe","displayBrushes","shadows","useGroups","consolidateGroups","randomize","$38fa8d142ebbdb45$var$randomizeBrushes","$38fa8d142ebbdb45$var$updateCSG","$38fa8d142ebbdb45$var$renderer","$38fa8d142ebbdb45$var$camera","$38fa8d142ebbdb45$var$scene","$38fa8d142ebbdb45$var$controls","$38fa8d142ebbdb45$var$gui","$38fa8d142ebbdb45$var$outputContainer","$38fa8d142ebbdb45$var$bunnyBrush","$38fa8d142ebbdb45$var$brushes","$38fa8d142ebbdb45$var$material","$38fa8d142ebbdb45$var$surfaceSampler","$38fa8d142ebbdb45$var$resultObject","$38fa8d142ebbdb45$var$wireframeResult","$38fa8d142ebbdb45$var$light","$38fa8d142ebbdb45$var$csgEvaluator","Evaluator","attributes","$38fa8d142ebbdb45$var$materialMap","Map","startTime","window","performance","now","finalBrush","l","evaluate","ADDITION","material","map","m","get","deltaTime","innerText","toFixed","groups","Array","isArray","position","applyMatrix4","matrixWorld","scale","setScalar","MathUtils","lerp","updateMatrixWorld","$38fa8d142ebbdb45$var$render","requestAnimationFrame","visible","forEach","castShadow","render","async","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","body","appendChild","domElement","Scene","DirectionalLight","add","AmbientLight","shadowCam","shadow","camera","mapSize","bias","normalBias","left","bottom","right","top","updateProjectionMatrix","PerspectiveCamera","far","$5Rd1x","OrbitControls","floor","Mesh","PlaneGeometry","ShadowMaterial","opacity","color","rotation","PI","receiveShadow","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","scene","children","computeVertexNormals","Brush","MeshStandardMaterial","SphereGeometry","push","mat","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","DoubleSide","premultipliedAlpha","roughness","clone","BufferGeometry","flatShading","MeshBasicMaterial","$jiuw3","GUI","REVERSE_SUBTRACTION","INTERSECTION","DIFFERENCE","HOLLOW_SUBTRACTION","HOLLOW_INTERSECTION","onChange","addEventListener","aspect","$38fa8d142ebbdb45$var$init"],"version":3,"file":"geometry.4596128a.js.map"}